name: Run cp
on:
  push:
    branches:
      - 'main'
    paths:
      - 'js/**'
      - 'kong-conf/**'
      - 'deck/**'



jobs:
  check_run:
    runs-on: kong
    outputs:
      should_run_all: ${{ steps.check.outputs.should_run_all }}
      should_run_vm: ${{ steps.check.outputs.should_run_vm }}
      should_run_deck: ${{ steps.check.outputs.should_run_deck }}
    steps:
    - id: check
      name: Check if files in kong-conf/, js/ or deck/ were modified
      run: |
        should_run_all=false
        should_run_vm=false
        should_run_deck=false
        if [[ "${{ join(github.event.commits[0].modified, ' ') }}" =~ "kong-conf/" ]] && [[ "${{ join(github.event.commits[0].modified, ' ') }}" =~ "js/" ]] && [[ "${{ join(github.event.commits[0].modified, ' ') }}" =~ "deck/" ]]; then
          should_run_all=true
          echo "Files in kong-conf/, js/ and deck/ were modified"
        elif [[ "${{ join(github.event.commits[0].modified, ' ') }}" =~ "kong-conf/" ]] && [[ "${{ join(github.event.commits[0].modified, ' ') }}" =~ "js/" ]]; then
          should_run_vm=true
          echo "Files in kong-conf/ and js/ were modified"
        elif [[ "${{ join(github.event.commits[0].modified, ' ') }}" =~ "deck/" ]]; then
          should_run_deck=true
          echo "Files in deck/ were modified"
        else
          echo "No files in kong-conf/, js/ or deck/ were modified"
        fi
        echo "::set-output name=should_run_all::$should_run_all"
        echo "::set-output name=should_run_vm::$should_run_vm"
        echo "::set-output name=should_run_deck::$should_run_deck"

  deploy-cp-js:
    needs: check_run
    if: needs.check_run.outputs.should_run_vm == 'true'
    runs-on: kong
    name: Deploying Kong cp
    environment: play
    steps:
    - name: Checkout
      uses: actions/checkout@v2.5.0
    - name: Setup Node
      uses: actions/setup-node@v3.5.1
      with:
        node-version: "16"

    - name: copyfile-js
      run: cp -rf ./js/* /usr/local/kong/js-plugins

    - name: copyfile-backup
      run: cp -f /etc/kong/kong.conf ./kongbackup.conf 

    - name: copyfile-kogconf
      run: cp -f ./kong-conf/kong.conf /etc/kong/kong.conf

    - name: restart kong
      run: sudo systemctl restart kong

    - name: Back kogconf
      if: ${{ failure() }}
      run: cp -f ./kongbackup.conf /etc/kong/kong.conf

    - name: restart kong
      if: ${{ failure() }}
      run: sudo systemctl restart kong

    - name: Trigger failure
      if: ${{ failure() }}
      continue-on-error: true
      run: exit 1
  deploy-deck:  
    needs: [check_run, deploy-cp-js]
    if: needs.check_run.outputs.should_run_deck == 'true'
    runs-on: kong
    name: Deploying Workspace def
    environment: play
    steps:
    - name: Checkout
      uses: actions/checkout@v2.5.0
    - name: Setup Node
      uses: actions/setup-node@v3.5.1
      with:
        node-version: "16"

    - name: Display decK Version
      run: deck version

    - name: Backup existing configuration for a specific tag
      run: deck dump -o kong-dev.yaml --tls-skip-verify
      env:
        DECK_KONG_ADDR: ${{ secrets.KONG_ADMIN_API_URL }}
        DECK_HEADERS: ${{ secrets.KONG_DECK_HEADERS }}

    - name: Validate Deck Config File
      run: deck validate -s ./deck

    - name: Compare Configurations
      run: deck diff  -s ./deck --tls-skip-verify
      env:
        DECK_KONG_ADDR: ${{ secrets.KONG_ADMIN_API_URL }}
        DECK_HEADERS: ${{ secrets.KONG_DECK_HEADERS }}

    - name: Apply new configuration
      run: deck sync  -s ./deck --tls-skip-verify
      env:
        DECK_KONG_ADDR: ${{ secrets.KONG_ADMIN_API_URL }}
        DECK_HEADERS: ${{ secrets.KONG_DECK_HEADERS }}

    - name: Back out changes on failure
      if: ${{ failure() }}
      run: deck sync  -s kong-dev.yaml  --tls-skip-verify
      env:
        DECK_KONG_ADDR: ${{ secrets.KONG_ADMIN_API_URL }}
        DECK_HEADERS: ${{ secrets.KONG_DECK_HEADERS }}

  deploy-deck-test1:  
      needs: [check_run, deploy-cp-js]
      if: needs.check_run.outputs.should_run_deck == 'true'
      runs-on: kong
      name: Deploying Workspace def-test1
      environment: play
      steps:
      - name: Checkout
        uses: actions/checkout@v2.5.0
      - name: Setup Node
        uses: actions/setup-node@v3.5.1
        with:
          node-version: "16"

      - name: Display decK Version
        run: deck version

      - name: Backup existing configuration for a specific tag
        run: deck dump -o kong-dev.yaml --tls-skip-verify
        env:
          DECK_KONG_ADDR: ${{ secrets.KONG_ADMIN_API_URL }}
          DECK_HEADERS: ${{ secrets.KONG_DECK_HEADERS }}

      - name: Validate Deck Config File
        run: deck validate -s ./deck-test1

      - name: Compare Configurations
        run: deck diff  -s ./deck-test1 --tls-skip-verify
        env:
          DECK_KONG_ADDR: ${{ secrets.KONG_ADMIN_API_URL }}
          DECK_HEADERS: ${{ secrets.KONG_DECK_HEADERS }}

      - name: Apply new configuration
        run: deck sync  -s ./deck-test1 --tls-skip-verify
        env:
          DECK_KONG_ADDR: ${{ secrets.KONG_ADMIN_API_URL }}
          DECK_HEADERS: ${{ secrets.KONG_DECK_HEADERS }}

      - name: Back out changes on failure
        if: ${{ failure() }}
        run: deck sync  -s kong-dev.yaml  --tls-skip-verify
        env:
          DECK_KONG_ADDR: ${{ secrets.KONG_ADMIN_API_URL }}
          DECK_HEADERS: ${{ secrets.KONG_DECK_HEADERS }}
        
